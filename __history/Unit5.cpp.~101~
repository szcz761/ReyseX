//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit5.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm5 *Form5;
//---------------------------------------------------------------------------
__fastcall TForm5::TForm5(TComponent* Owner)
	: TForm(Owner)
{
	DFill=2;
	//Canvas->Pen->Mode = psDash  ;
	ScrollBar1->SetParams(4,1,100);
	ScrollBar2->SetParams(20,1,100);
	ScrollBar3->SetParams(200,99,600);
	ScrollBar4->SetParams(0,-100,100);
	Image1->Canvas->Pen->Width=IWidth;
	CColor=clWhite;
	Image1->Canvas->Draw(0,0,Image2->Picture->Graphic);
	Form5->Color=clLtGray;
	Form5->DoubleBuffered = true;
}

 //---------------------------------------------------------------------------
void __fastcall TForm5::draw()
{
	int r,g,b;
	int blue   = (CColor & 0xff0000) >> 16;
	int green = (CColor & 0x00ff00) >> 8;
	int red  = (CColor & 0x0000ff);
	Image1->Canvas->Draw(0,0,Image2->Picture->Graphic);
	int i=0;

	for(int i=1;i<=IWidth/DFill;i++)
	{
		bool bPierwszy=true;
		iPierwszy=0;
		for (std::list<TPoint>::iterator it=list_point.begin(); it != list_point.end(); ++it)
		{
			std::list<TPoint>::iterator next=++it;
			if(it == list_point.end())
				break;
			--it;
			int iChoose=0;//1 Lewo->Prawo; 2 Prawo->Lewo; 3 Góra->Dó³; 4 Dó³->Góra
			r = red *  i/(IWidth/DFill);
			g = green * i/(IWidth/DFill);
			b = blue * i/(IWidth/DFill);
			Image1->Canvas->Pen->Color=RGB(r,g,b);
			Image1->Canvas->Pen->Width=IWidth-i+1;
			if(it->X<next->X&&it->Y==next->Y)
			{
				Image1->Canvas->MoveTo(it->X+IRadius,it->Y);
				Image1->Canvas->LineTo(next->X-IRadius,next->Y);
				iChoose=1;
			}
			else if(it->X>next->X&&it->Y==next->Y)
			{
				Image1->Canvas->MoveTo(it->X-IRadius,it->Y);
				Image1->Canvas->LineTo(next->X+IRadius,next->Y);
				iChoose=2;
			}
			else if(it->X==next->X&&it->Y<next->Y)
			{
				Image1->Canvas->MoveTo(it->X,it->Y+IRadius);
				Image1->Canvas->LineTo(next->X,next->Y-IRadius);
				iChoose=3;
			}
			else if(it->X==next->X&&it->Y>next->Y)
			{
				Image1->Canvas->MoveTo(it->X,it->Y-IRadius);
				Image1->Canvas->LineTo(next->X,next->Y+IRadius);
				iChoose=4;
			}

			if(bPierwszy)
			{
			   Image1->Canvas->LineTo(it->X,it->Y);
			   iPierwszy=iChoose;
			}
			bPierwszy=false;

			++next;
			if(next != list_point.end())
			{
				drawCorner(iChoose,next,--next);
				++next;
			}
			else
			{
				--next;
				Image1->Canvas->LineTo(next->X,next->Y);
				drawEndBlack(iChoose,0);
				if(CheckBox4->Checked)
					drawSpeciall(iChoose,0);
				else if(CheckBox5->Checked)
					drawSpeciall2(iChoose);
				switch (iPierwszy)  // ichoose 1 Lewo->Prawo; 2 Prawo->Lewo; 3 Góra->Dó³; 4 Dó³->Góra
				{
				case 1:
				drawEndBlack(2,1);
				break;
				case 2:
				drawEndBlack(1,1);
				break;
				case 3:
				drawEndBlack(4,1);
				break;
				case 4:
				drawEndBlack(3,1);
				break;
				}
				++next;
			}
			--next;


		}
	}

}
	 void __fastcall TForm5::drawCorner(int ichoose,std::list<TPoint>::iterator pNext, std::list<TPoint>::iterator pNow){
	 switch (ichoose)  // ichoose 1 Lewo->Prawo; 2 Prawo->Lewo; 3 Góra->Dó³; 4 Dó³->Góra
	 {
	case 1:
		if(pNext->Y>pNow->Y) //gora->do³
		{
			Image1->Canvas->MoveTo(pNow->X, pNow->Y+IRadius);
			Image1->Canvas->AngleArc(pNow->X-IRadius,pNow->Y+IRadius,IRadius ,0,90);
		}
		else if(pNext->Y<pNow->Y)//dó³->góra
		{
			Image1->Canvas->MoveTo(pNow->X-IRadius,pNow->Y);
			Image1->Canvas->AngleArc(pNow->X-IRadius,pNow->Y-IRadius,IRadius ,270,90);
		}
		break;
	case 2:
		if(pNext->Y>pNow->Y) //gora->do³
		{
			Image1->Canvas->MoveTo(pNow->X+IRadius, pNow->Y);
			Image1->Canvas->AngleArc(pNow->X+IRadius,pNow->Y+IRadius,IRadius ,90,90);
		}
		else if(pNext->Y<pNow->Y)//dó³->góra
		{
			Image1->Canvas->MoveTo(pNow->X,pNow->Y-IRadius);
			Image1->Canvas->AngleArc(pNow->X+IRadius,pNow->Y-IRadius,IRadius ,180,90);
		}
		break;
	case 3:
		if(pNext->X>pNow->X) //lewo->prawo
		{
			Image1->Canvas->MoveTo(pNow->X, pNow->Y-IRadius);
			Image1->Canvas->AngleArc(pNow->X+IRadius,pNow->Y-IRadius,IRadius ,180,90);
		}
		else if(pNext->X<pNow->X)//prawo->lewo
		{
			Image1->Canvas->MoveTo(pNow->X-IRadius,pNow->Y);
			Image1->Canvas->AngleArc(pNow->X-IRadius,pNow->Y-IRadius,IRadius ,270,90);
		}
		break;
	case 4:
		if(pNext->X>pNow->X) //lewo->prawo
		{
			Image1->Canvas->MoveTo(pNow->X+IRadius,pNow->Y);
			Image1->Canvas->AngleArc(pNow->X+IRadius,pNow->Y+IRadius,IRadius ,90,90);
		}
		else if(pNext->X<pNow->X)//prawo->lewo
		{
			Image1->Canvas->MoveTo(pNow->X,pNow->Y+IRadius);
			Image1->Canvas->AngleArc(pNow->X-IRadius,pNow->Y+IRadius,IRadius ,0,90);
		}
		break;
	default:
		;
	 }

}
//---------------------------------------------------------------------------
void __fastcall TForm5::Image1MouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{
	if(list_point.size()<1)
	{
		TPoint tmp(X,Y);
		list_point.push_back(tmp);
		return;
	}

	if(abs(X-list_point.back().X)>abs(Y-list_point.back().Y))
		Y=list_point.back().Y;
	else
		X=list_point.back().X;
	TPoint tmp2(X,Y);
	list_point.push_back(tmp2);
	draw();
}
//---------------------------------------------------------------------------


void __fastcall TForm5::Button1Click(TObject *Sender)
{
	Image1->Canvas->Draw(0,0,Image2->Picture->Graphic);
	while(!list_point.empty())
		list_point.pop_back();
}

//---------------------------------------------------------------------------

void __fastcall TForm5::Image1MouseMove(TObject *Sender, TShiftState Shift, int X,
		  int Y)
{
 if (CheckBox1->Checked)
	if(!list_point.empty())
		{
			if(abs(X-list_point.back().X)>abs(Y-list_point.back().Y))
				Y=list_point.back().Y;
			else
				X=list_point.back().X;
			Image1->Canvas->Pen->Width=IWidth;
			Image1->Canvas->Pen->Color=clBlack;//Image1->Canvas->Pixels[1][1];
			Image1->Canvas->MoveTo(list_point.back().X,list_point.back().Y);
			Image1->Canvas->LineTo(IOldX,IOldY);
			Image1->Canvas->Pen->Color=CColor;
			Image1->Canvas->MoveTo(list_point.back().X,list_point.back().Y);
			Image1->Canvas->LineTo(X,Y);

			IOldX=X;
			IOldY=Y;

		}
}
//---------------------------------------------------------------------------

void __fastcall TForm5::drawEndBlack( int ic,bool pierwszy)//case ic = 1 prawo, ic=2 lewo, ic=3 dol, ic=4 gora
{
	int iX;
	int iY;
	if(pierwszy){
		iX=list_point.front().X;
		iY=list_point.front().Y;
	}
	else
	{
		iX=list_point.back().X;
		iY=list_point.back().Y;
	}
	Image1->Canvas->Pen->Width=1;
	Image1->Canvas->Pen->Color=clBlack;
	Image1->Canvas->Brush->Color=clBlack;
	int irad=IWidth/2;
	switch (ic) {
	case 1:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY),
		 Point(iX,iY+irad),
		 Point(iX+irad, iY+irad),
		 Point(iX+irad, iY-irad),
		 Point(iX, iY-irad))));
		break;
	case 2:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY),
		 Point(iX,iY+irad),
		 Point(iX-irad, iY+irad),
		 Point(iX-irad, iY-irad),
		 Point(iX, iY-irad))));
		break;
	case 3:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY),
		 Point(iX-irad, iY),
		 Point(iX-irad, iY+irad),
		 Point(iX+irad, iY+irad),
		 Point(iX+irad, iY))));
		break;
	case 4:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY),
		 Point(iX-irad, iY),
		 Point(iX-irad, iY-irad),
		 Point(iX+irad, iY-irad),
		 Point(iX+irad, iY))));
		break;
	default:
		;
	}
	Image1->Canvas->Pen->Color=CColor;
	Image1->Canvas->Pen->Width=IWidth;
}
//---------------------------------------------------------------------------
void __fastcall TForm5::drawSpeciall( int ic,bool pierwszy)//case ic = 1 prawo, ic=2 lewo, ic=3 dol, ic=4 gora
{

	int iX;
	int iY;
	if(pierwszy){
		iX=list_point.front().X;
		iY=list_point.front().Y;
	}
	else
	{
		iX=list_point.back().X;
		iY=list_point.back().Y;
	}
	Image1->Canvas->Pen->Width=1;
	Image1->Canvas->Pen->Color=CColor;
	Image1->Canvas->Brush->Color=CColor;
	int irad=IWidth/2;
	switch (ic) {
	case 1:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX+irad/4, iY),
		 Point(iX+irad/4,iY-irad/8),
		 Point(iX+irad/1.5, iY-irad/8),
		 Point(iX+irad/1.5, iY-irad/4),
		 Point(iX+irad, iY),
		 Point(iX+irad/1.5, iY+irad/4),
		 Point(iX+irad/1.5, iY+irad/8),
		 Point(iX+irad/4, iY+irad/8))));
		break;
	case 2:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX-irad/4, iY),
		 Point(iX-irad/4,iY-irad/8),
		 Point(iX-irad/1.5, iY-irad/8),
		 Point(iX-irad/1.5, iY-irad/4),
		 Point(iX-irad, iY),
		 Point(iX-irad/1.5, iY+irad/4),
		 Point(iX-irad/1.5, iY+irad/8),
		 Point(iX-irad/4, iY+irad/8))));
		break;
	case 3:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY+irad/4),
		 Point(iX-irad/8,iY+irad/4),
		 Point(iX-irad/8, iY+irad/1.5),
		 Point(iX-irad/4, iY+irad/1.5),
		 Point(iX, iY+irad),
		 Point(iX+irad/4, iY+irad/1.5),
		 Point(iX+irad/8, iY+irad/1.5),
		 Point(iX+irad/8, iY+irad/4))));
		break;
	case 4:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY-irad/4),
		 Point(iX-irad/8,iY-irad/4),
		 Point(iX-irad/8, iY-irad/1.5),
		 Point(iX-irad/4, iY-irad/1.5),
		 Point(iX, iY-irad),
		 Point(iX+irad/4, iY-irad/1.5),
		 Point(iX+irad/8, iY-irad/1.5),
		 Point(iX+irad/8, iY-irad/4))));
	  	break;
	default:
		;
	}
	Image1->Canvas->Pen->Color=CColor;
	Image1->Canvas->Pen->Width=IWidth;
}
//---------------------------------------------------------------------------
void __fastcall TForm5::CheckBox1Click(TObject *Sender)
{

	if(!CheckBox1->Checked)
		if(!list_point.empty());
			draw();
}
//---------------------------------------------------------------------------

void __fastcall TForm5::CheckBox2Click(TObject *Sender)
{
	if(CheckBox2->Checked)
	{
		 Form5->Color=clBlack;//Form5->Canvas->Pixels[0][0];
		 Form5->TransparentColor=true;
	}
	else
	{
		Form5->Color=clLtGray;
		Form5->TransparentColor=false;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm5::Button6Click(TObject *Sender)
{
	int imaxX=0;
	int imaxY=0;
	int iminX=100000000;
	int iminY=100000000;

	for (std::list<TPoint>::iterator it=list_point.begin(); it != list_point.end(); ++it)
	{
		if(it->X<iminX)
			iminX= it->X;
		if(it->Y<iminY)
			iminY= it->Y;
		if(it->X>imaxX)
			imaxX= it->X;
		if(it->Y>imaxY)
			imaxY= it->Y;
	}

	if(CheckBox5->Checked)
	{
	int lon=IPointerLong;
		if(lon<0)
			lon=0;
	switch (IC) {
	case 1:
		imaxX=imaxX+lon+1.4*IWidth;
		break;
	case 2:
		iminX=iminX-lon-1.4*IWidth;
		break;
	case 3:
		 imaxY=imaxY+lon+1.4*IWidth;
		break;
	case 4:
		iminY=iminY-lon-1.4*IWidth;
	default:
		;
	}

	}

	ImageEnd->Canvas->Draw(-(iminX-(IWidth/2)),-(iminY-(IWidth/2)),Image1->Picture->Graphic);
	PngEnd=new TPngImage();
	PngEnd->Assign(ImageEnd->Picture->Graphic);
	PngEnd->SetSize(IWidth+imaxX-iminX,IWidth+imaxY-iminY);
	PngEnd->Transparent = true;
	PngEnd->TransparentColor= Image1->Canvas->Pixels[1][1];
	UnicodeString name = Edit1->Text+".png";
	if(!CheckBox3->Checked)
		PngEnd->CreateAlpha();//=<<<<<<<<<<<<<<<<<<<<========== USUN JAK POTRZEBA PRZEZROCZYSTOSCI
	PngEnd->SaveToFile("rury_end/"+name);

}
//---------------------------------------------------------------------------

void __fastcall TForm5::ImageColorClick(TObject *Sender)
{
	ColorDialog->Color = clWhite;
  if(ColorDialog->Execute(this->Handle))
   {
	 CColor = ColorDialog->Color;
	 draw();
   }
}
//---------------------------------------------------------------------------

void __fastcall TForm5::Button7Click(TObject *Sender)
{
   list_point.pop_back();
   draw();
}
//---------------------------------------------------------------------------


void __fastcall TForm5::FormKeyDown(TObject *Sender, WORD &Key, TShiftState Shift)
{
	if (Key == 0x70){
		if(CheckBox2->Checked == false)
			CheckBox2->Checked = true;
		else
			CheckBox2->Checked = false;
	}
	if (Key == 0x71){
		if(CheckBox1->Checked == false)
			CheckBox1->Checked = true;
		else
			CheckBox1->Checked = false;
	}
	if (Key == 0x72){
		list_point.pop_back();
		draw();
	}
}
//---------------------------------------------------------------------------


void __fastcall TForm5::ScrollBar1Change(TObject *Sender)
{
	IWidth=ScrollBar1->Position;
	Label6->Caption=IntToStr(ScrollBar1->Position);
	draw();
}
//---------------------------------------------------------------------------

void __fastcall TForm5::ScrollBar2Change(TObject *Sender)
{
	IRadius=ScrollBar2->Position;
	Label5->Caption=IntToStr(ScrollBar2->Position);
	draw();
}
//---------------------------------------------------------------------------


void __fastcall TForm5::ScrollBar3Change(TObject *Sender)
{
	DFill=(double)ScrollBar3->Position/100;
	Label4->Caption=IntToStr(ScrollBar3->Position);
	draw();
}
//---------------------------------------------------------------------------

void __fastcall TForm5::CheckBox4Click(TObject *Sender)
{
  draw();
}
//---------------------------------------------------------------------------

void __fastcall TForm5::drawSpeciall2( int ic)//case ic = 1 prawo, ic=2 lewo, ic=3 dol, ic=4 gora
{

	int iX=list_point.back().X;
	int iY=list_point.back().Y;

	int r,g,b;
	int blue   = (CColor & 0xff0000) >> 16;
	int green = (CColor & 0x00ff00) >> 8;
	int red  = (CColor & 0x0000ff);

	double dfill= DFill;

	for(int i=1;i<=(IWidth/dfill);i++)
	{
	Image1->Canvas->Pen->Width=1;

		r = red *  i/(IWidth/dfill);
		g = green * i/(IWidth/dfill);
		b = blue * i/(IWidth/dfill);
		Image1->Canvas->Pen->Color=RGB(r,g,b);
		//Image1->Canvas->Pen->Width=(IWidth-i+1)/10;
		Image1->Canvas->Brush->Color=RGB(r,g,b);

	int irad=(IWidth-i+1);
	switch (ic) {
	case 1:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY+irad+i/3),
		 Point(iX+irad*2+i+IPointerLong, iY),
		 Point(iX, iY-irad-i/3))));
		break;
	case 2:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX, iY+irad+i/3),
		 Point(iX-irad*2-i-IPointerLong, iY),
		 Point(iX, iY-irad-i/3))));
		break;
	case 3:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX+irad+i/3, iY),
		 Point(iX, iY+irad*2+i+IPointerLong),
		 Point(iX-irad-i/3, iY))));
		break;
	case 4:
		 Image1->Canvas->Polygon(OPENARRAY (TPoint, (
		 Point(iX+irad+i/3, iY),
		 Point(iX, iY-irad*2-i-IPointerLong),
		 Point(iX-irad-i/3, iY))));
	default:
		;
	}
    }
	Image1->Canvas->Pen->Color=CColor;
	Image1->Canvas->Pen->Width=IWidth;
	IC=ic;
}
//---------------------------------------------------------------------------
void __fastcall TForm5::CheckBox5Click(TObject *Sender)
{
    draw();
}
//---------------------------------------------------------------------------
 void __fastcall TForm5::ScrollBar4Change(TObject *Sender)
{
	IPointerLong=ScrollBar4->Position;
	Label8->Caption=IntToStr(ScrollBar4->Position);
	draw();
}
//---------------------------------------------------------------------------


/*	int iX;
	int iY;
	if(pierwszy){
		iX=list_point.front().X;
		iY=list_point.front().Y;
	}
	else
	{
		iX=list_point.back().X;
		iY=list_point.back().Y;
	}
	int iWidth= IWidth;
	IWidth=IWidth*1.3;
	int r,g,b;
	int blue   = (CColor & 0xff0000) >> 16;
	int green = (CColor & 0x00ff00) >> 8;
	int red  = (CColor & 0x0000ff);
	for(int i=1;i<=iWidth/DFill;i++)
	{

		r = red *  i/(IWidth/DFill);
		g = green * i/(IWidth/DFill);
		b = blue * i/(IWidth/DFill);
		Image1->Canvas->Pen->Color=RGB(r,g,b);
		Image1->Canvas->Pen->Width=(IWidth-i+1)/10;

		switch (ic) {
		case 1:
				Image1->Canvas->MoveTo(iX,iY);
				Image1->Canvas->LineTo(iX+IWidth/10,iY);
			break;
		case 2:
				Image1->Canvas->MoveTo(iX,iY);
				Image1->Canvas->LineTo(iX-IWidth/10,iY);
			break;
		case 3:
				Image1->Canvas->MoveTo(iX,iY);
				Image1->Canvas->LineTo(iX,iY+IWidth/10);
			break;
		case 4:
				Image1->Canvas->MoveTo(iX,iY);
				Image1->Canvas->LineTo(iX,iY-IWidth/10);
			break;
		default:
			;
		}
	//Image1->Canvas->Pen->Color=CColor;

	}
	Image1->Canvas->Pen->Width=IWidth;
	IWidth= iWidth;*/



